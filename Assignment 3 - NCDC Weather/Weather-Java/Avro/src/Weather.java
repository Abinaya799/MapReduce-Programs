/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.Schema;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
@org.apache.avro.specific.AvroGenerated
public class Weather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4661230831838847809L;


  public static final Schema SCHEMA$ = new Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Weather\",\"fields\":[{\"name\"" +
          ":\"station\",\"type\":\"string\"},{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"Max\"," +
          "\"type\":\"float\"},{\"name\":\"Min\",\"type\":\"float\"}]}");

  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Weather> ENCODER =
      new BinaryMessageEncoder<Weather>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Weather> DECODER =
      new BinaryMessageDecoder<Weather>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Weather> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Weather> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Weather> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Weather>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Weather to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Weather from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Weather instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Weather fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence station;
  private java.lang.CharSequence date;
  private float Max;
  private float Min;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Weather() {}

  /**
   * All-args constructor.
   * @param station The new value for station
   * @param date The new value for date
   * @param Max The new value for Max
   * @param Min The new value for Min
   */
  public Weather(java.lang.CharSequence station, java.lang.CharSequence date, java.lang.Float Max, java.lang.Float Min) {
    this.station = station;
    this.date = date;
    this.Max = Max;
    this.Min = Min;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return station;
    case 1: return date;
    case 2: return Max;
    case 3: return Min;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: station = (java.lang.CharSequence)value$; break;
    case 1: date = (java.lang.CharSequence)value$; break;
    case 2: Max = (java.lang.Float)value$; break;
    case 3: Min = (java.lang.Float)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'station' field.
   * @return The value of the 'station' field.
   */
  public java.lang.CharSequence getStation() {
    return station;
  }


  /**
   * Sets the value of the 'station' field.
   * @param value the value to set.
   */
  public void setStation(java.lang.CharSequence value) {
    this.station = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'Max' field.
   * @return The value of the 'Max' field.
   */
  public float getMax() {
    return Max;
  }


  /**
   * Sets the value of the 'Max' field.
   * @param value the value to set.
   */
  public void setMax(float value) {
    this.Max = value;
  }

  /**
   * Gets the value of the 'Min' field.
   * @return The value of the 'Min' field.
   */
  public float getMin() {
    return Min;
  }


  /**
   * Sets the value of the 'Min' field.
   * @param value the value to set.
   */
  public void setMin(float value) {
    this.Min = value;
  }

  /**
   * Creates a new Weather RecordBuilder.
   * @return A new Weather RecordBuilder
   */
  public static Weather.Builder newBuilder() {
    return new Weather.Builder();
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Weather RecordBuilder
   */
  public static Weather.Builder newBuilder(Weather.Builder other) {
    if (other == null) {
      return new Weather.Builder();
    } else {
      return new Weather.Builder(other);
    }
  }

  /**
   * Creates a new Weather RecordBuilder by copying an existing Weather instance.
   * @param other The existing instance to copy.
   * @return A new Weather RecordBuilder
   */
  public static Weather.Builder newBuilder(Weather other) {
    if (other == null) {
      return new Weather.Builder();
    } else {
      return new Weather.Builder(other);
    }
  }

  /**
   * RecordBuilder for Weather instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Weather>
    implements org.apache.avro.data.RecordBuilder<Weather> {

    private java.lang.CharSequence station;
    private java.lang.CharSequence date;
    private float Max;
    private float Min;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Weather.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.Max)) {
        this.Max = data().deepCopy(fields()[2].schema(), other.Max);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.Min)) {
        this.Min = data().deepCopy(fields()[3].schema(), other.Min);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Weather instance
     * @param other The existing instance to copy.
     */
    private Builder(Weather other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.station)) {
        this.station = data().deepCopy(fields()[0].schema(), other.station);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Max)) {
        this.Max = data().deepCopy(fields()[2].schema(), other.Max);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Min)) {
        this.Min = data().deepCopy(fields()[3].schema(), other.Min);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'station' field.
      * @return The value.
      */
    public java.lang.CharSequence getStation() {
      return station;
    }


    /**
      * Sets the value of the 'station' field.
      * @param value The value of 'station'.
      * @return This builder.
      */
    public Weather.Builder setStation(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.station = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'station' field has been set.
      * @return True if the 'station' field has been set, false otherwise.
      */
    public boolean hasStation() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'station' field.
      * @return This builder.
      */
    public Weather.Builder clearStation() {
      station = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public Weather.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public Weather.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'Max' field.
      * @return The value.
      */
    public float getMax() {
      return Max;
    }


    /**
      * Sets the value of the 'Max' field.
      * @param value The value of 'Max'.
      * @return This builder.
      */
    public Weather.Builder setMax(float value) {
      validate(fields()[2], value);
      this.Max = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'Max' field has been set.
      * @return True if the 'Max' field has been set, false otherwise.
      */
    public boolean hasMax() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'Max' field.
      * @return This builder.
      */
    public Weather.Builder clearMax() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'Min' field.
      * @return The value.
      */
    public float getMin() {
      return Min;
    }


    /**
      * Sets the value of the 'Min' field.
      * @param value The value of 'Min'.
      * @return This builder.
      */
    public Weather.Builder setMin(float value) {
      validate(fields()[3], value);
      this.Min = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'Min' field has been set.
      * @return True if the 'Min' field has been set, false otherwise.
      */
    public boolean hasMin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'Min' field.
      * @return This builder.
      */
    public Weather.Builder clearMin() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Weather build() {
      try {
        Weather record = new Weather();
        record.station = fieldSetFlags()[0] ? this.station : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.Max = fieldSetFlags()[2] ? this.Max : (java.lang.Float) defaultValue(fields()[2]);
        record.Min = fieldSetFlags()[3] ? this.Min : (java.lang.Float) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Weather>
    WRITER$ = (org.apache.avro.io.DatumWriter<Weather>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Weather>
    READER$ = (org.apache.avro.io.DatumReader<Weather>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.station);

    out.writeString(this.date);

    out.writeFloat(this.Max);

    out.writeFloat(this.Min);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.station = in.readString(this.station instanceof Utf8 ? (Utf8)this.station : null);

      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      this.Max = in.readFloat();

      this.Min = in.readFloat();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.station = in.readString(this.station instanceof Utf8 ? (Utf8)this.station : null);
          break;

        case 1:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 2:
          this.Max = in.readFloat();
          break;

        case 3:
          this.Min = in.readFloat();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










